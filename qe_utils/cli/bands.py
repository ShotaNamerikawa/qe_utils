import click
import numpy as np
from qe_utils.pwx_in import PWxIn
from qe_utils.bands import Filband, Filbandgnu

# TODO: add plot band along kpath.

@click.group()
@click.argument("filband")
@click.pass_context
def bands(ctx, filband:str):
    """
    filband = the name of filband in the input file of bands.x
    """
    ctx.obj = Filband(filband)

@bands.command()
@click.argument("energy_index", nargs = -1)
@click.option("--mode", help = "all for all energy value, range for min and max", default = "range")
@click.option("--show_kpoints",default = False, type =bool)
@click.pass_context
def band_info(ctx, energy_index:list|None, mode:str="range", show_kpoints:bool = False):
    """get band information from filband generated by bands.x
    """
    filband = ctx.obj
    if ":" in energy_index:
        energy_index = np.arange(*[int(num) for num in energy_index.split(":")])
    else:
        try:
            energy_index = np.array([int(i) for i in energy_index.split()],dtype=int)
        except:
            ValueError("energy_index ({energy_index}) is invalid.")    
        
    if show_kpoints:
        print("k points")
        for ik in range(filband.k_list.shape[0]):
            print(filband.k_list[ik,:])

    if mode == "range":
        # print the minimum and maximum energy of selected bands.
        print("indices of bands, min energy, max energy")
        for i in energy_index:
            print(f"{i} {np.min(filband.bands_en[:,i])} {np.max(filband.bands_en[:,i])}")

    elif mode == "all":
        # print all the energies of selected bands.
        print("indices of bands, all energies")
        for i in energy_index:
            print(i)
            print(filband.bands_en[:,i])
            
@bands.command()
@click.argument("bands",nargs=-1)
@click.option("--pwxin",help="the file name of the input of pw.x corresponding to bands.x input. If given, vertical lines at high symmetry kpoints are plotted.")
@click.option("--fermi",type=float, help="the Fermi energy of the bands. If given, energy = 0 eV is the Fermi energy.")
@click.option("--savefig",type=str,help="the file name to which plot is saved. If not given, plot is not saved.")
@click.pass_context
def plot(ctx, bands:str, pwxin:str, savefig:str|None = None, fermi = None):
    """plot bands using filband.gnu
    If band indices are given, corresponding bands are highlighted in the plot.
    """
    filbandgnu = ctx.obj.get_filbandgnu()
    if pwxin:
        pwxin = PWxIn.from_pwx_input(pwxin)
    if bands:
        if ":" in bands:
            bands = np.arange([int(num) for num in bands.split(":")])
        else:
            bands = np.array([int(num) for num in bands.split()])
    else:
        bands = []
    filbandgnu.plot(pwxin = pwxin, highlight_bands= bands, savefig = savefig, fermi = fermi)
            
if __name__ == "__main__":
    bands()